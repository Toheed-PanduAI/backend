from datetime import datetime
from database import db
from database.models import CreditTransactions
from fastapi import HTTPException

CREDIT_COSTS = {
    "video_generation": 3,
    "video_editing": 2
}

# To deduct credits
async def deduct_credits(user_id: str, amount: int, description: str):
    session =  db.start_session()
    async with session.start_transaction():
        user =  db.users_collection.find_one({"_id": user_id}, session=session)
        if user["credits"] < amount:
            raise HTTPException(status_code=400, detail="Insufficient credits")
        
        db.users_collection.update_one({"_id": user_id}, {"$inc": {"credits": -amount}}, session=session)
        transaction = CreditTransactions(user_id=user_id, amount=-amount, description=description)
        db.credit_transactions.insert_one(transaction.dict(by_alias=True), session=session)

# To get total video generated by a user
async def get_videos_generated_count(user_id: str):
    pipeline = [
        {"$match": {"user_id": user_id, "service_type": "video_generation"}},
        {"$count": "total_videos_generated"}
    ]
    result =  db.credit_transactions.aggregate(pipeline).to_list(length=1)
    return result[0]["total_videos_generated"] if result else 0

# To get credits used by a user monthly
async def get_monthly_credits_used(user_id: str, year: int, month: int):
    pipeline = [
        {"$match": {
            "user_id": user_id,
            "timestamp": {
                "$gte": datetime(year, month, 1),
                "$lt": datetime(year, month + 1, 1) if month < 12 else datetime(year + 1, 1, 1)
            }
        }},
        {"$group": {
            "_id": None,
            "total_credits_used": {"$sum": "$amount"}
        }}
    ]
    result =  db.credit_transactions.aggregate(pipeline).to_list(length=1)
    return abs(result[0]["total_credits_used"]) if result else 0